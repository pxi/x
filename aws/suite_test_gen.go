// +build ignore

// https://docs.aws.amazon.com/general/latest/gr/signature-v4-test-suite.html
package main

import (
	"archive/zip"
	"bytes"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

const (
	suiteDir  = "testdata"
	suiteFile = "suite_test.go"

	suiteText = `// Code generated by suite_test_gen.go DO NOT EDIT.
package aws

var suiteTests = []string{
{{range .}}
{{- printf "\t%q,\n" .}}
{{- end}}}`
)

func main() {
	log.SetFlags(0)

	if err := os.MkdirAll(suiteDir, 0755); err != nil {
		log.Fatal(err)
	}

	seen := make(map[string]struct{})
	names := make([]string, 0)
	if err := fetch(func(name string, data []byte) error {
		ext := filepath.Ext(name)

		switch ext {
		case ".req", ".sreq":
			if bytes.Index(data, []byte("\n\n")) < 0 {
				data = append(data, []byte("\n\n")...)
			}
		case ".creq", ".sts":
		default:
			return nil
		}

		fname := filepath.Join(suiteDir, name)
		if err := ioutil.WriteFile(fname, data, 0755); err != nil {
			return err
		}

		name = strings.TrimSuffix(name, ext)
		if _, ok := seen[name]; !ok {
			names = append(names, name)
			seen[name] = struct{}{}
		}

		return nil
	}); err != nil {
		log.Fatal(err)
	}

	suite := template.Must(template.New("suite").Parse(suiteText))

	var buf bytes.Buffer
	if err := suite.Execute(&buf, names); err != nil {
		log.Fatal(err)
	}

	if err := ioutil.WriteFile(suiteFile, buf.Bytes(), 0755); err != nil {
		log.Fatal(err)
	}
}

const suiteURL = "http://docs.aws.amazon.com/general/latest/gr/samples/aws-sig-v4-test-suite.zip"

func fetch(f func(string, []byte) error) error {
	resp, err := http.Get(suiteURL)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	// Read the body before considering resp.StatusCode.
	var buf bytes.Buffer
	if _, err := io.Copy(&buf, resp.Body); err != nil {
		return err
	}

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("%s returned %d", suiteURL, resp.StatusCode)
	}

	b := buf.Bytes()
	z, err := zip.NewReader(bytes.NewReader(b), int64(len(b)))
	if err != nil {
		return err
	}

	for _, file := range z.File {
		b, err := read(file)
		if err != nil {
			return err
		}
		if err := f(filepath.Base(file.Name), b); err != nil {
			return err
		}
	}

	return nil
}

func read(file *zip.File) ([]byte, error) {
	f, err := file.Open()
	if err != nil {
		return nil, err
	}
	defer f.Close()
	return ioutil.ReadAll(f)
}
