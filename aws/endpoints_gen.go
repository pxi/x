// +build ignore

package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"net/http"
	"strings"
	"text/template"
)

const (
	fileName      = "endpoints.go"
	endpointsJSON = "https://raw.githubusercontent.com/aws/aws-sdk-go/master/models/endpoints/endpoints.json"
)

func main() {
	log.SetFlags(0)
	log.SetPrefix("endpoints_gen.go")

	e, err := get(endpointsJSON)
	if err != nil {
		log.Fatal(err)
	}
	if err := generate(fileTemplate, e, fileName); err != nil {
		log.Fatal(err)
	}
}

// endpoints is a container for parsed endpointsJSON file.
type endpoints struct {
	Partitions []partition `json:"partitions"`
}

func get(url string) (endpoints, error) {
	resp, err := http.Get(url)
	if err != nil {
		return endpoints{}, err
	}
	defer resp.Body.Close()
	if resp.StatusCode != http.StatusOK {
		return endpoints{}, fmt.Errorf("got status %d", resp.StatusCode)
	}
	var ep endpoints
	if err := json.NewDecoder(resp.Body).Decode(&ep); err != nil {
		return endpoints{}, err
	}
	return ep, nil
}

type partition struct {
	Name    string            `json:"partitionName"`
	Regions map[string]region `json:"regions"`
}

type region struct {
	Description string `json:"description"`
}

// regionName convers strings like "eu-west-1" to strings like "EUWest1".
func regionName(id string) string {
	parts := strings.Split(id, "-")

	name := strings.ToUpper(parts[0])
	for i := range parts[1:] {
		name += strings.Title(parts[i+1])
	}
	return name
}

// generate renders source text from t using values from data, formats the
// output as Go source, and writes the result to path.
func generate(t *template.Template, data endpoints, path string) error {
	var buf bytes.Buffer
	if err := t.Execute(&buf, data); err != nil {
		return err
	}
	src, err := format.Source(buf.Bytes())
	if err != nil {
		return err
	}
	return ioutil.WriteFile(path, src, 0644)
}

var funcMap = template.FuncMap{
	"RegionName": regionName,
}

var fileTemplate = template.Must(template.New("").Funcs(funcMap).Parse(`
// Code generated by endpoints_gen.go; DO NOT EDIT.

package aws

// Known regions.
const (
{{- range .Partitions }}
{{- range $id, $region := .Regions }}
	{{ RegionName $id }} = {{ printf "%q" $id }} // {{ $region.Description }}
{{- end }}
{{- end }}
)

var knownRegions = []string{
{{- range .Partitions }}
{{- range $id, $_ := .Regions }}
	{{ RegionName $id }},
{{- end }}
{{- end }}
	"external-1",
}
`))
